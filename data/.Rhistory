}
}
k=j=1
t = which.max(cor(W[k,which(u==k),j],W_post_cbind))
t
ind_post_W = c(ind_post_W,t)
ind_post_W
W_post_c
W_post_cbind[,ind_post_W[t]]
for (k in 1:K) {
for (j in 1:J) {
# find the dim j and group k in X_post that matches X[j,k] the best
t = which.max(cor(W[k,which(u==k),j],W_post_cbind))
ind_post_W = c(ind_post_W,t)
W_post_c = c(W_post_c,W_post_cbind[,t])
t = which.max(cor(W[k,which(u==k),j],W_ordered_cbind))
ind_ordered_W = c(ind_ordered_W,t)
W_ordered_c = c(W_ordered_c,W_ordered_cbind[,t])
W_c = c(W_c,W[k,which(u==k),j])
}
}
matplot( W_c, cbind( W_post_c, W_ordered_c ) )
print('cor(W):')
print(cor( cbind( c( W_c), c(W_post_c), c(W_ordered_c) ) ))
source('~/Documents/Lab/Project/MDS/stan/MDS_simulation_0.R')
source('~/Documents/Lab/Project/MDS/stan/MDS_simulation_0.R')
source('~/Documents/Lab/Project/MDS/stan/MDS_simulation_1.R')
mcmc_chain = as.matrix(fit)
niter = (fit@sim$iter-fit@sim$warmup)*fit@sim$chains
# label switching
u_post = array(NA,dim=c(niter,H,K))
for (h in 1:H) {
for (k in 1:K) {
u_post[,h,k] = mcmc_chain[,paste('u[',h,',',k,']',sep='')]
}
}
run = stephens(u_post)
order_prmt = run$permutations # permutation order
tmp = tmp_order = array(NA,dim=c(niter,K))
ind_u = 2-apply(u_post[,1:H,1],2,mean)
plot(ind_u)
ind_u = round(ind_u)
ind_u
for (j in 1:(J-1)) {
if (w_diff) {
W[1,,j] = runif(H,min=0.1,max=0.9);
W[2,,j] = runif(H,min=0.1,max=0.9);
} else {
W[,,j] = runif(H,min=0,max=1);
}
}
W[,,J] = J-apply(W[,,1:(J-1)],c(1,2),sum)
d_tmp = array(NA,dim=c(K,H,Ipairs,J))
d = array(NA,dim=c(K,H,Ipairs)) # distance
Y = array(NA,dim=c(H,Ipairs)) # data: ratings
sigma_Y = 0.2
for (h in 1:H) {
for (i in 2:I) {
for (ii in 1:(i-1)) {
t = ii+(i-1)*(i-2)/2
for (k in 1:K) {
for (j in 1:J) {
d_tmp[k,h,t,j] = W[k,h,j]*( X[i,j,k]-X[ii,j,k])^2
}
d[k,h,t] = sqrt( sum(d_tmp[k,h,t,]) )
}
Y[h,t] = rnorm(1,d[u[h],h,t],sigma_Y)
while (Y[h,t]<0) Y[h,t] = rnorm(1,d[u[h],h,t],sigma_Y)
}
}
}
data = list(H=H, I=I, Ipairs=Ipairs, J=J, K=K, Y=Y)
fit <- vb(object = model_cmp,data=data,iter=50000,tol_rel_obj=.01)
mcmc_chain = as.matrix(fit)
niter = (fit@sim$iter-fit@sim$warmup)*fit@sim$chains
# label switching
u_post = array(NA,dim=c(niter,H,K))
for (h in 1:H) {
for (k in 1:K) {
u_post[,h,k] = mcmc_chain[,paste('u[',h,',',k,']',sep='')]
}
}
run = stephens(u_post)
order_prmt = run$permutations # permutation order
tmp = tmp_order = array(NA,dim=c(niter,K))
# group membership
ind_u = 2-apply(u_post[,1:H,1],2,mean)
plot(ind_u)
ind_u = round(ind_u)
ind_u = round(ind_u)
ind_u
rm(list=ls())
require(rstan)
require(label.switching)
#########data simulation#########
H = 14 # number of subjects
I = 12 # number of stimuli
Ipairs = I*(I-1)/2
J = 2 # number of dimensions
K = 2 # number of classes
u = rep_len(1,H) # group membership for each subject
u[8:14] = 2
### coordinates, choose one
# coordinates different between classes
# X = array(NA,dim=c(I,J,K))
# X[,,1] = rnorm(I*J,0,sd=3); X[,,2] = rnorm(I*J,2,sd=3)
#coordinates same between classes
X = array(rnorm(I*J*K,0,sd=3),dim=c(I,J,K))
### weights, choose one
W = array(NA,dim=c(K,H,J))  # attention weights on the first dimension
# weights different across classes
#w1 = array(NA,dim=c(K,H))
#w1[1,] = rnorm(H,0.7,1); w1[2,] = rnorm(H,0.8,1)
# weights same across classes
w1 = array(runif(K*H,min=0,max=2),dim=c(K,H))  # attention weights on the first dimension
w2 = 2-w1 # attention weights on the second dimension
W[,,1] = w1; W[,,2] = w2;
d = array(NA,dim=c(K,H,Ipairs)) # distance
Y = array(NA,dim=c(H,Ipairs)) # data: ratings
sigma_Y = 0.2
for (h in 1:H) {
for (i in 2:I) {
for (ii in 1:(i-1)) {
t = ii+(i-1)*(i-2)/2
for (k in 1:K) {
d[k,h,t] = sqrt( W[k,h,1]*(X[i,1,k]-X[ii,1,k])^2 + W[k,h,2]*(X[i,2,k]-X[ii,2,k])^2 )
}
Y[h,t] = rnorm(1,d[u[h],h,t],sigma_Y)
while (Y[h,t]<0) Y[h,t] = rnorm(1,d[u[h],h,t],sigma_Y)
}
}
}
data = list(H=H, I=I, Ipairs=Ipairs, J=J, K=K, Y=Y)
model = '~/Documents/Lab/Project/MDS/stan/MDS_1.stan'
warmup = 1000
iter = 2000
chains = 3
#
# #run the model using ADVI
model_cmp = stan_model(file = model,verbose = T)
fit <- vb(object = model_cmp,data=data,iter=50000,tol_rel_obj=.01)
mcmc_chain = as.matrix(fit)
niter = (fit@sim$iter-fit@sim$warmup)*fit@sim$chains
# label switching
u_post = array(NA,dim=c(niter,H,K))
for (h in 1:H) {
for (k in 1:K) {
u_post[,h,k] = mcmc_chain[,paste('u[',h,',',k,']',sep='')]
}
}
run = stephens(u_post)
order_prmt = run$permutations # permutation order
tmp = tmp_order = array(NA,dim=c(niter,K))
# group membership
ind_u = 2-apply(u_post[,1:H,1],2,mean)
plot(ind_u)
ind_u = round(ind_u)
source('~/Documents/Lab/Project/MDS/stan/MDS_simulation_1.R')
mcmc_chain = as.matrix(fit)
niter = (fit@sim$iter-fit@sim$warmup)*fit@sim$chains
# label switching
u_post = array(NA,dim=c(niter,H,K))
for (h in 1:H) {
for (k in 1:K) {
u_post[,h,k] = mcmc_chain[,paste('u[',h,',',k,']',sep='')]
}
}
run = stephens(u_post)
order_prmt = run$permutations # permutation order
tmp = tmp_order = array(NA,dim=c(niter,K))
# group membership
ind_u = 2-apply(u_post[,1:H,1],2,mean)
plot(ind_u)
ind_u = round(ind_u)
# coordinate locations
# X_post: posterior prediction of X, X_ordered: X_post ordered based on label switching
X_post = X_ordered = array(NA,dim=c(I,J,K))
for (i in 1:I) {
for (j in 1:J) {
for (k in 1:K) {
tmp[,k] = tmp_order[,k] = mcmc_chain[,paste('X[',i,',',j,',',k,']',sep='')]
}
for (m in 1:niter) tmp_order[m,] = tmp[m,order_prmt[m,]]
X_post[i,j,] = colMeans(tmp)
X_ordered[i,j,] = colMeans(tmp_order)
}
}
ind_post_X = ind_ordered_X = array(NA,dim=c(J*K,2))
X_c = X_post_c = X_ordered_c = NULL
for (j in 1:J) {
for (k in 1:K) {
t = J*(j-1)+k
# find the dim j and group k in X_post that matches X[j,k] the best
ind_post_X[t,] = arrayInd(which.max(abs(apply(X_post,c(2,3),cor,y=X[,j,k]))),.dim = c(J,K))
# get the sign of the matching cell
# (since the diff was squared, X might be either positive or negative)
X_tmp = X_post[,ind_post_X[t,1],ind_post_X[t,2]]
sign_tmp = sign(cor(X[,j,k],X_tmp))
X_post_c = c(X_post_c,sign_tmp*X_tmp)
ind_ordered_X[t,] = arrayInd(which.max(abs(apply(X_ordered,c(2,3),cor,y=X[,j,k]))),.dim = c(J,K))
X_tmp = X_ordered[,ind_ordered_X[t,1],ind_ordered_X[t,2]]
sign_tmp = sign(cor(X[,j,k],X_tmp))
X_ordered_c = c(X_ordered_c,sign_tmp*X_tmp)
X_c = c(X_c,X[,j,k])
}
}
j
k
t = J*(j-1)+k
t
ind_post_X[t,]
t
str(ind_post_X)
J
K
apply(X_post,c(2,3),cor,y=X[,j,k])
for (j in 1:J) {
for (k in 1:K) {
print(J*(j-1)+k)}}
K
J
for (j in 1:J) {
for (k in 1:K) {
print(K*(j-1)+k)}}
for (j in 1:2) {
for (k in 1:3) {
print(K*(j-1)+k)}}
for (j in 1:2) {
for (k in 1:3) {
print(3*(j-1)+k)}}
for (j in 1:2) {
for (k in 1:3) { for (m in 1:4)
print(4*(k-1)+12*(j-1)+k)}}
for (j in 1:2) {
for (k in 1:3) { for (m in 1:4)
print(4*(k-1)+12*(j-1)+m)}}
t = K*(j-1)+k
# find the dim j and group k in X_post that matches X[j,k] the best
ind_post_X[t,] = arrayInd(which.max(abs(apply(X_post,c(2,3),cor,y=X[,j,k]))),.dim = c(J,K))
ind_post_X = ind_ordered_X = array(NA,dim=c(J*K,2))
X_c = X_post_c = X_ordered_c = NULL
for (j in 1:J) {
for (k in 1:K) {
t = K*(j-1)+k
# find the dim j and group k in X_post that matches X[j,k] the best
ind_post_X[t,] = arrayInd(which.max(abs(apply(X_post,c(2,3),cor,y=X[,j,k]))),.dim = c(J,K))
# get the sign of the matching cell
# (since the diff was squared, X might be either positive or negative)
X_tmp = X_post[,ind_post_X[t,1],ind_post_X[t,2]]
sign_tmp = sign(cor(X[,j,k],X_tmp))
X_post_c = c(X_post_c,sign_tmp*X_tmp)
ind_ordered_X[t,] = arrayInd(which.max(abs(apply(X_ordered,c(2,3),cor,y=X[,j,k]))),.dim = c(J,K))
X_tmp = X_ordered[,ind_ordered_X[t,1],ind_ordered_X[t,2]]
sign_tmp = sign(cor(X[,j,k],X_tmp))
X_ordered_c = c(X_ordered_c,sign_tmp*X_tmp)
X_c = c(X_c,X[,j,k])
}
}
print('X: One-to-one maximal relationship?')
print(sum(sort(which(!is.na(X[1,,]),arr.ind = T))==sort(ind_post_X))==J*K*2)
print(sum(sort(which(!is.na(X[1,,]),arr.ind = T))==sort(ind_ordered_X))==J*K*2)
matplot(X_c,cbind(X_post_c,X_ordered_c))
print('cor(X):')
print(cor(cbind(X_c,X_post_c,X_ordered_c)))
print(cor(cbind(X[,1,1],X[,1,2],X[,2,1],X[,2,2]),
cbind(X_ordered[,1,1],X_ordered[,1,2],X_ordered[,2,1],X_ordered[,2,2])))
ind_post_X
W_post = W_ordered = array(NA,dim=c(K,H,J))
for (j in 1:J) {
for (h in 1:H) {
for (k in 1:K) {
tmp[,k] = tmp_order[,k] = mcmc_chain[,paste('W[',k,',',h,',',j,']',sep='')]
}
for (m in 1:niter) tmp_order[m,] = tmp[m,order_prmt[m,]]
W_post[,h,j] = colMeans(tmp)
W_ordered[,h,j] = colMeans(tmp_order)
}
}
ind_post_W = ind_ordered_W = NULL
W_c = W_post_c = W_ordered_c = W_post_cbind = W_ordered_cbind = NULL;
grp = list()
for (k in 1:K) grp[[k]] = which(ind_u==k)
for (k in 1:K) {
for (j in 1:J) {
for (g in 1:K) {
W_post_cbind = cbind(W_post_cbind,W_post[k,grp[[g]],j])
W_ordered_cbind = cbind(W_ordered_cbind,W_post[k,grp[[g]],j])
}
}
}
for (k in 1:K) {
for (j in 1:J) {
# find the dim j and group k in X_post that matches X[j,k] the best
t = which.max(cor(W[k,which(u==k),j],W_post_cbind))
ind_post_W = c(ind_post_W,t)
W_post_c = c(W_post_c,W_post_cbind[,t])
t = which.max(cor(W[k,which(u==k),j],W_ordered_cbind))
ind_ordered_W = c(ind_ordered_W,t)
W_ordered_c = c(W_ordered_c,W_ordered_cbind[,t])
W_c = c(W_c,W[k,which(u==k),j])
}
}
matplot( W_c, cbind( W_post_c, W_ordered_c ) )
print('cor(W):')
print(cor( cbind( c( W_c), c(W_post_c), c(W_ordered_c) ) ))
# Y_pred
Y_pred = array(NA,dim=c(K,H,Ipairs))
Y_post = array(NA,dim=c(H,Ipairs))
for (t in 1:Ipairs) {
for (h in 1:H) {
for (k in 1:K) {
Y_pred[k,h,t] = mean(mcmc_chain[,paste('Y_pred[',k,',',h,',',t,']',sep='')])
}
Y_post[h,t] = Y_pred[ind_u[h],h,t]
}
}
plot(c(Y),c(Y_post))
print(c('cor(c(Y),c(Y_post)):',cor(c(Y),c(Y_post))))
source('~/Documents/Lab/Project/MDS/stan/MDS_simulation_1.R')
load("~/Documents/Lab/Project/MDS/stan/fit_1/fit_dim_2_grp_1.Rdata")
log_lik=extract_log_lik(x,'ps')
library("rstan", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
log_lik=extract_log_lik(x,'ps')
library("loo", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
log_lik=extract_log_lik(x,'ps')
loo1 <- loo(log_lik)
c(loo1$elpd_loo,loo1$p_loo,loo1$looic)
waic1 <- waic(log_lik)
c(waic1$elpd_waic,waic1$p_waic,waic1$waic)
source('~/Documents/Lab/Project/MDS/stan/MDS_simulation_1.R')
cor_X[run] = cor(X_c, X_post_c)
run
source('~/Documents/Lab/Project/MDS/stan/MDS_simulation_1.R')
ver
load("~/Documents/Lab/Project/MDS/data/results/dat_MDS.Rdata")
View(birdsc)
dimnames(dist_MDS)
dist_MDS[1:10,2,2]
View(birdsc)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv
)
nb
""
"
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
View(nba)
install.packages("RMySQL")
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='host')
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='host')
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='10.223.9.50:3306')
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='10.223.9.50')
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='http://expertise.psy.vanderbilt.edu/hiddendb')
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='expertise.psy.vanderbilt.edu/hiddendb')
con <- dbConnect(RMySQL::MySQL(), dbname = "test")
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='10.223.9.50')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='10.223.9.50')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='expertise.psy.vanderbilt.edu/hiddendb')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='expertise.psy.vanderbilt.edu')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='expertise.psy.vanderbilt.edu')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='expertise.psy.vanderbilt.edu/hiddendb')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='129.59.231.105')
setwd("/Applications/MAMP/htdocs/MDS_ID/data")
require('rstan')
rm(list=ls())
graphics.off()
se <- function(x) {sd(x)/sqrt(length(x))}
pathname = "."
filePattern = "*_MDS.csv"
fileNameVec = dir( path=pathname, pattern=filePattern )
nSubj = length(fileNameVec)
nbird = 20; ntrial = 300
id_index = c(2:301)
subj=1
dat=list() # use this one if dat is a list with each participant's data as an elment of the list
id_vars = c('response','rt','bird','class','family','acc')
subnames = matrix(unlist(strsplit(fileNameVec,'_')),ncol=7,byrow = T)[,1]
id = array(NA,dim=c(length(id_vars),nSubj,ntrial),dimnames = list(id_vars,subnames))
lengthn = rep_len(NA,nSubj)
for ( subj in 1:nSubj ) {
dataFileName = paste(pathname, "/", fileNameVec[subj], sep="" )
dat[[subj]] = read.csv(dataFileName,stringsAsFactors = F)
id_tmp = dat[[subj]]$responses[id_index]
id_tmp[id_tmp=="{}"] = '{\"Q0\":\"NULL\"}'
id['response',subj,] = matrix(unlist(strsplit(id_tmp,'"')),nrow=ntrial,byrow = T)[,4]
lengthn[subj] = length(unlist(strsplit(id_tmp, "\"")))
id['rt',subj,] = dat[[subj]]$rt[id_index]
id['bird',subj,] = dat[[subj]]$bird[id_index]
id['acc',subj,] = as.numeric(id['bird',subj,]==id['response',subj,])
id['class',subj,] = dat[[subj]]$class[id_index]
id['family',subj,] = dat[[subj]]$family[id_index]
}
id_score = apply(id['acc',,],1,function(x) {sum(as.numeric(x))})
birds = unique(id['bird',1,])
id_MDS = array(0,dim=c(nSubj,nbird,nbird),dimnames = list(subnames,birds,birds))
for (subi in subnames) {
for (i in birds){
for (j in birds) {
id_MDS[subi,i,j] = sum(id['bird',subi,]==i & id['response',subi,]==j)
}
}
}
dist = lapply(seq(dim(dist_MDS)[1]), function(x) dist_MDS[x,,])
save(id_MDS,id,file='dat_MDS_ID.Rdata')
print(which(apply(id_MDS,1,sum)!=300))
x=id_MDS[42,,]
View(x)
sum(x)
x=id_MDS[48,,]
y=id['response',48,]
y
y=id['acc',48,]
sum(y)
sum(as.numeric(y))
sum(id['bird',1,]==id['bird',2,])
sum(id['bird',1,]==id['bird',22,])
sum(id['bird',1,]==id['bird',21,])
sum(id['bird',1,]==id['bird',22,])
sum(id['bird',1,]==id['bird',24,])
sum(id['bird',1,]==id['bird',48,])
subi=subnames[48]
i
j
sum(id['bird',subi,]==i & id['response',subi,]==j)
id_MDS[subi,i,j]
print(which(apply(id_MDS,1,sum)!=300))
View(x)
for (i in birds){
for (j in birds) {
id_MDS[subi,i,j] = sum(id['bird',subi,]==i & id['response',subi,]==j)
}
}
sum(id_MDS[48,,])
birds == unique(id['bird',48,])
id_MDS[48,1,1]
id_MDS[48,20,20]
subi
i
j
sum(id['bird',subi,]==i & id['response',subi,]==j)
length(unique(subnames))
sort(table(subnames))
which(subnames=='335')
sum(id['acc',63,])
sum(as.numeric(id['acc',63,]))
sum(as.numeric(id['acc',64,]))
which(subnames=='2441')
sum(as.numeric(id['acc',47,]))
sum(as.numeric(id['acc',48,]))
setwd("/Applications/MAMP/htdocs/MDS_ID/data")
require('rstan')
## Data Analysis for MDS similarity ratings
## Jianhong Shen, Jun 2016
rm(list=ls())
graphics.off()
se <- function(x) {sd(x)/sqrt(length(x))}
# Load the data (Contains subjNums, dat)
# Specify the subfolder
pathname = "."
# Specify the beginnings of files
filePattern = "*_MDS.csv"
# List the data files
fileNameVec = dir( path=pathname, pattern=filePattern )
# Number of subjs
nSubj = length(fileNameVec)
nbird = 20; ntrial = 300
id_index = c(2:301)
subj=1
#dat=NULL  # use this one if dat is a big data frame
dat=list() # use this one if dat is a list with each participant's data as an elment of the list
id_vars = c('response','rt','bird','class','family','acc')
subnames = matrix(unlist(strsplit(fileNameVec,'_')),ncol=7,byrow = T)[,1]
id = array(NA,dim=c(length(id_vars),nSubj,ntrial),dimnames = list(id_vars,subnames))
lengthn = rep_len(NA,nSubj)
for ( subj in 1:nSubj ) {
dataFileName = paste(pathname, "/", fileNameVec[subj], sep="" )
dat[[subj]] = read.csv(dataFileName,stringsAsFactors = F)
id_tmp = dat[[subj]]$responses[id_index]
id_tmp[id_tmp=="{}"] = '{\"Q0\":\"NULL\"}'
id['response',subj,] = matrix(unlist(strsplit(id_tmp,'"')),nrow=ntrial,byrow = T)[,4]
lengthn[subj] = length(unlist(strsplit(id_tmp, "\"")))
id['rt',subj,] = dat[[subj]]$rt[id_index]
id['bird',subj,] = dat[[subj]]$bird[id_index]
id['acc',subj,] = as.numeric(id['bird',subj,]==id['response',subj,])
id['class',subj,] = dat[[subj]]$class[id_index]
id['family',subj,] = dat[[subj]]$family[id_index]
}
id_score = apply(id['acc',,],1,function(x) {sum(as.numeric(x))})
## calculate
birds = unique(id['bird',1,])
id_MDS = array(0,dim=c(nSubj,nbird,nbird),dimnames = list(subnames,birds,birds))
for (subi in subnames) {
for (i in birds){
for (j in birds) {
id_MDS[subi,i,j] = sum(id['bird',subi,]==i & id['response',subi,]==j)
}
}
}
print(which(apply(id_MDS,1,sum)!=300))
sum(id['acc','2322',])
sum(as.numeric(id['acc','2322',]))
print(apply(id_MDS,1,sum)!=300)[which(apply(id_MDS,1,sum)!=300)])
print(apply(id_MDS,1,sum)[which(apply(id_MDS,1,sum)!=300)])
print(apply(id_MDS,1,sum)['2775'])
print(apply(id_MDS['2775',,],1,sum))
print(sum(id_MDS['2775',,]))
x=id_MDS['2775',,]
View(x)
which(subnames=='2775')
x=id_MDS[57,,]
apply(id_MDS,1,sum)
